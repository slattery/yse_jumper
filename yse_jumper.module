<?php

use Drupal\Core\Render\BubbleableMetadata;
use Drupal\Core\Field\Plugin\Field\FieldType\EntityReferenceItem;
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Component\Utility\Html;
use Drupal\node\Entity\Node;
use Drupal\paragraphs\ParagraphInterface;
use Drupal\paragraphs\Entity\Paragraph;
use Drupal\paragraphs_library\LibraryItemInterface;
use Drupal\paragraphs_library\Entity\LibraryItem;

/**
 * Implements hook_help().
 */
function yse_jumper_help($route_name, RouteMatchInterface $route_match) {
  if ($route_name == 'help.page.yse_jumper') {
    $text = file_get_contents(__DIR__ . '/README.md');
    if (!Drupal::moduleHandler()->moduleExists('markdown')) {
      return '<pre>' . $text . '</pre>';
    }
    else {
      /** @var \Drupal\markdown\PluginManager\ParserManagerInterface $parser_manager */
      $parser_manager = \Drupal::service('plugin.manager.markdown.parser');
      $parser = $parser_manager->getDefaultParser([
        'render_strategy' => ['type' => 'none'],
      ]);
      return $parser->parse($text);
    }
  }
  return NULL;
}


function yse_jumper_preprocess_paragraph(&$variables) {
  /** @var \Drupal\paragraphs\ParagraphInterface $paragraph */
  $paragraph = $variables['paragraph'];
  //used to yeet on from_library as well but not now
  if ($paragraph->getType() == 'layout_section') {
    return;
  }
  $para_uuid = $paragraph->uuid();
  $para_step = NULL;
  $hex_array = explode("-", $para_uuid);
  $hex_group = reset($hex_array);
  $hex_jumpr = 'jump_' . $hex_group;
  $str_jumpr = NULL;
  if ($paragraph->hasField('field_jump_nav_heading')) {
    $str_jumpr = $paragraph->get('field_jump_nav_heading')->value;
  }
  if (empty($str_jumpr)) {
    $domid = $hex_jumpr;
  }
  else {
    $domid = Html::getId($str_jumpr);
  }
  if (empty($variables['attributes']['id'])) {
    // Add variables here
    $variables['dom_id'] = $domid;
    $variables['attributes']['id'] = $domid;
  }
  if (!empty($str_jumpr) && empty($variables['attributes']['data-jump-nav-heading'])) {
    $variables['jump-nav-heading'] = $str_jumpr;
    $variables['attributes']['data-jump-nav-heading'] = $str_jumpr;
  }

  //climb up chain to summit node
  list($ceiling_node, $steps) = _find_summit_node($paragraph);

  if (!empty($ceiling_node) && $ceiling_node->toUrl()->toString()) {
    $variables['local_path'] = $ceiling_node->toUrl()->toString();
    $variables['share_path'] = $variables['local_path'] . '#' . $domid;
    $variables['share_title'] = $ceiling_node->getTitle();
    \Drupal::service('renderer')->addCacheableDependency($variables, $ceiling_node);
  }

  if (empty($ceiling_node) && \Drupal::service('module_handler')->moduleExists('yse_paragraphs_promoter')) {
    if (isset($variables['promoter_path']) && !empty($variables['promoter_path'])) {
      $variables['share_path'] = $variables['promoter_path'] . '#' . $domid;
    }
    if (isset($variables['promoter_title']) && !empty($variables['promoter_title'])) {
      $variables['share_title'] = $variables['promoter_title'];
    }
  }

  if (!empty($steps) and $steps > 0) {
    $variables['depth'] = $steps;
  }
  //if node changes path, or para finds its way into many paths?
  $variables['#cache']['contexts'][] = 'url.path';
}


/**
 * Gets an entity (assumed to be a paragraph)
 * and climbs entity tree to see if the top-most node can be found
 * if the top-most node is a 'yse_resuable_node' or in future config blacklist
 *  or if climb reaches an end that is not a node (view or libitem list, etc.)
 *  then leave variables blank and let assumed promoter take over.
 */
function _find_summit_node($paragraph, $steps = 1) {

  $parent = $paragraph->getParentEntity();
  //Exclude embedded paragraphs in WYSIWYGs from pathfinding right away
  if ($parent instanceof \Drupal\entity_embed\Entity\EntityEmbedFakeEntity) {
    return [NULL, NULL];
  }

  list($summit_node, $steps) = _climb($parent, $steps);
  return [$summit_node, $steps];
}

function _climb($object, $steps) {
  if ($object instanceof \Drupal\entity_embed\Entity\EntityEmbedFakeEntity) {
    return [NULL, NULL];
  }

  //EntityReferenceItem does not have hasField so mere failure does not help
  if ($object instanceof EntityReferenceItem) {
    _climb($object->getEntity(), ++$steps);
  }
  elseif ($object->hasField('parent_type') && $object->get('parent_type')->value) {
    if ($object->get('parent_type')->value == 'paragraphs_library_item') {
      _climb($object->_referringItem, ++$steps);
    }
    elseif ($object instanceof Paragraph || $object instanceof ParagraphInterface) {
      if ($object->getParentEntity()) {
        _climb($object->getParentEntity(), ++$steps);
      }
    }
  }
  elseif ($object->_referringItem) {
    _climb($object->_referringItem, ++$steps);
  }
  else {
    if ($object instanceof Node) {
      //maybe todo try to let this climb if there is _referringItem
      if (\Drupal::service('module_handler')->moduleExists('yse_paragraphs_promoter')
        && ($object->getType() == 'yse_reusable_item')) {
        //promoter expected to handle this, so we can exit
        return [NULL, NULL];
      }
      else {
        return [$object, $steps];
      }
    }
    else {
      return [$object, $steps];
    }
  }
  return [NULL, NULL];

}
